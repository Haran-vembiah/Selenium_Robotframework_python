<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1.3 (Python 3.7.4 on win32)" generated="20220128 15:27:03.209" rpa="false" schemaversion="2">
<suite id="s1" name="DBTesting" source="D:\Skill_development\Robotframework_sample\TestCases\DBTesting.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>psycopg2</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20220128 15:27:03.272" level="INFO">Connecting using : psycopg2.connect(database=robot_sample, user=postgres, password=54321, host=127.0.0.1, port=5432) </msg>
<status status="PASS" starttime="20220128 15:27:03.256" endtime="20220128 15:27:03.287"/>
</kw>
<test id="s1-t1" name="Inserting Data in person Table">
<kw name="Single Record">
<msg timestamp="20220128 15:27:03.303" level="FAIL">No keyword with name 'Single Record' found.</msg>
<status status="FAIL" starttime="20220128 15:27:03.303" endtime="20220128 15:27:03.303"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>Insert into sample_db.person values(101,"John","canady");</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20220128 15:27:03.303" endtime="20220128 15:27:03.303"/>
</kw>
<status status="FAIL" starttime="20220128 15:27:03.303" endtime="20220128 15:27:03.303">No keyword with name 'Single Record' found.</status>
</test>
<test id="s1-t2" name="Check David record present in Person Table">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>select id from sample_db.person where first_name='David';</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20220128 15:27:03.303" level="INFO">Executing : Check If Exists In Database  |  select id from sample_db.person where first_name='David'; </msg>
<msg timestamp="20220128 15:27:03.303" level="INFO">Executing : Query  |  select id from sample_db.person where first_name='David'; </msg>
<msg timestamp="20220128 15:27:03.309" level="FAIL">Expected to have have at least one row from 'select id from sample_db.person where first_name='David';' but got 0 rows.</msg>
<status status="FAIL" starttime="20220128 15:27:03.303" endtime="20220128 15:27:03.309"/>
</kw>
<status status="FAIL" starttime="20220128 15:27:03.303" endtime="20220128 15:27:03.309">Expected to have have at least one row from 'select id from sample_db.person where first_name='David';' but got 0 rows.</status>
</test>
<test id="s1-t3" name="Check Jio record Not present in Person Table">
<kw name="Check If Not Exists In Database" library="DatabaseLibrary">
<arg>select id from sample_db.person where first_name='Jio';</arg>
<doc>This is the negation of `check_if_exists_in_database`.</doc>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Check If Not Exists In Database  |  select id from sample_db.person where first_name='Jio'; </msg>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Query  |  select id from sample_db.person where first_name='Jio'; </msg>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</kw>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</test>
<test id="s1-t4" name="Verify Row Count is Zero">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>SELECT * FROM sample_db.person WHERE first_name = 'xyz';</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Row Count Is 0  |  SELECT * FROM sample_db.person WHERE first_name = 'xyz'; </msg>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Row Count  |  SELECT * FROM sample_db.person WHERE first_name = 'xyz'; </msg>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</kw>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</test>
<test id="s1-t5" name="Verify Row Count is Equal to Some Value">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>SELECT * FROM sample_db.person WHERE first_name = 'David';</arg>
<arg>1</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Row Count Is Equal To X  |  SELECT * FROM sample_db.person WHERE first_name = 'David';  |  1 </msg>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Row Count  |  SELECT * FROM sample_db.person WHERE first_name = 'David'; </msg>
<msg timestamp="20220128 15:27:03.309" level="FAIL">Expected same number of rows to be returned from 'SELECT * FROM sample_db.person WHERE first_name = 'David';' than the returned rows of 0</msg>
<status status="FAIL" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</kw>
<status status="FAIL" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309">Expected same number of rows to be returned from 'SELECT * FROM sample_db.person WHERE first_name = 'David';' than the returned rows of 0</status>
</test>
<test id="s1-t6" name="Verify Row Count is Greater than Some Value">
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<arg>SELECT * FROM sample_db.person WHERE first_name = 'David';</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Row Count Is Greater Than X  |  SELECT * FROM sample_db.person WHERE first_name = 'David';  |  0 </msg>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Row Count  |  SELECT * FROM sample_db.person WHERE first_name = 'David'; </msg>
<msg timestamp="20220128 15:27:03.309" level="FAIL">Expected more rows to be returned from 'SELECT * FROM sample_db.person WHERE first_name = 'David';' than the returned rows of 0</msg>
<status status="FAIL" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</kw>
<status status="FAIL" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309">Expected more rows to be returned from 'SELECT * FROM sample_db.person WHERE first_name = 'David';' than the returned rows of 0</status>
</test>
<test id="s1-t7" name="Verify Row Count is less than Some Value">
<kw name="Row Count Is Less Than X" library="DatabaseLibrary">
<arg>SELECT * FROM sample_db.person WHERE first_name = 'David';</arg>
<arg>5</arg>
<doc>Check if the number of rows returned from `selectStatement` is less than the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Row Count Is Less Than X  |  SELECT * FROM sample_db.person WHERE first_name = 'David';  |  5 </msg>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Row Count  |  SELECT * FROM sample_db.person WHERE first_name = 'David'; </msg>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</kw>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</test>
<test id="s1-t8" name="Update record in person table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>Update sample_db.person set first_name='Jio' where id=104;</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Execute SQL String  |  Update sample_db.person set first_name='Jio' where id=104; </msg>
<msg timestamp="20220128 15:27:03.309" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220128 15:27:03.309" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</kw>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</test>
<test id="s1-t9" name="Retrieve Records from Person Table">
<kw name="Query" library="DatabaseLibrary">
<var>@{queryResults}</var>
<arg>Select * from sample_db.person;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20220128 15:27:03.309" level="INFO">Executing : Query  |  Select * from sample_db.person; </msg>
<msg timestamp="20220128 15:27:03.309" level="INFO">@{queryResults} = [ ]</msg>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.309"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>many @{queryResults}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.325"/>
</kw>
<status status="PASS" starttime="20220128 15:27:03.309" endtime="20220128 15:27:03.325"/>
</test>
<test id="s1-t10" name="Retrieve Records from newtable Table">
<kw name="Query" library="DatabaseLibrary">
<var>@{queryResults}</var>
<arg>select * from sample_db.newtable;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20220128 15:27:03.325" level="INFO">Executing : Query  |  select * from sample_db.newtable; </msg>
<msg timestamp="20220128 15:27:03.325" level="INFO">@{queryResults} = [ ('100', 'Haran', 'coimbatore') | ('105', 'Ananth', 'salem') | ('103', 'Karthik', 'erode') | ('104', 'Nadesan', 'bhavani') | ('101', 'Chandru', 'chennai') | ('102', 'Surya', 'tgode') ]</msg>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>many @{queryResults}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</kw>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</test>
<test id="s1-t11" name="Retrieve Record of Haran from newtable Table">
<kw name="Query" library="DatabaseLibrary">
<var>@{queryResults}</var>
<arg>select * from sample_db.newtable where sno='101';</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20220128 15:27:03.325" level="INFO">Executing : Query  |  select * from sample_db.newtable where sno='101'; </msg>
<msg timestamp="20220128 15:27:03.325" level="INFO">@{queryResults} = [ ('101', 'Chandru', 'chennai') ]</msg>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>@{queryResults}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</kw>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</test>
<test id="s1-t12" name="Retrieve Records from person Table">
<kw name="Query" library="DatabaseLibrary">
<var>@{queryResults}</var>
<arg>select * from sample_db.person;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20220128 15:27:03.325" level="INFO">Executing : Query  |  select * from sample_db.person; </msg>
<msg timestamp="20220128 15:27:03.325" level="INFO">@{queryResults} = [ ]</msg>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>many @{queryResults}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</kw>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20220128 15:27:03.325" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20220128 15:27:03.325" endtime="20220128 15:27:03.325"/>
</kw>
<status status="FAIL" starttime="20220128 15:27:03.209" endtime="20220128 15:27:03.325"/>
</suite>
<statistics>
<total>
<stat pass="8" fail="4" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="8" fail="4" skip="0" id="s1" name="DBTesting">DBTesting</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20220128 15:27:03.325" level="WARN">Multiple test cases with name 'Retrieve Records from person Table' executed in test suite 'DBTesting'.</msg>
</errors>
</robot>
